{
  "version": 3,
  "file": "tests.js",
  "sources": [
    "tmp/transpiled/tests/acceptance/index_test.js",
    "tmp/transpiled/tests/acceptance/photo_edit_test.js",
    "tmp/transpiled/tests/acceptance/photos_new_test.js",
    "tmp/transpiled/tests/acceptance/photos_test.js",
    "tmp/transpiled/tests/unit/routes/index_test.js",
    "tmp/transpiled/tests/unit/routes/photos/new_test.js",
    "tmp/transpiled/tests/unit/utils/local_storage_test.js"
  ],
  "names": [],
  "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACjjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K",
  "sourcesContent": [
    "define(\"ember-crud-example/tests/acceptance/index_test\",\n  [\"ember-crud-example/app\"],\n  function(App) {\n    \"use strict\";\n\n    module(\"Acceptances - Index\", {\n      setup: function(){\n        App.reset();\n      }\n    });\n\n    test(\"index renders\", function(){\n      visit('/').then(function(){\n        ok(exists(\".btn.new:contains('New photo')\"));\n      });\n    });\n\n  });",
    "define(\"ember-crud-example/tests/acceptance/photo_edit_test\",\n  [\"ember-crud-example/app\",\"ember-crud-example/models/photo\"],\n  function(App, Photo) {\n    \"use strict\";\n    /* global deletePhotos: false */\n\n\n    var storage, model, guid;\n\n    module(\"Acceptances - Photo Edit\", {\n      setup: function(){\n        App.reset();\n        storage = App.__container__.lookup('storage:main');\n        model = Em.run( Photo, 'create', {\n          title: \"Work in progress\",\n          description: \"This item is incomplete.\"\n        });\n        Em.run( storage, 'create', model );\n      },\n      teardown: function() {\n        deletePhotos();\n      }\n    });\n\n    test(\"required exist\", function(){\n      equal(Em.typeOf(storage), 'instance');\n      equal(Em.typeOf(model), 'instance');\n      equal(Em.typeOf(model.get('title')), 'string');\n      ok( model.get('title') !== '' );\n    });\n\n    test(\"renders\", function(){\n      visit('/photo/%@/edit'.fmt(model.get('guid')))\n        .then(function(){\n          ok(find(\"#inputTitle\").val() === 'Work in progress');\n          ok(find(\"#textareaDescription\").val() === \"This item is incomplete.\");\n        });\n    });\n\n    test(\"discards\", function(){\n      guid = model.get('guid');\n\n      visit('/photo/%@/edit'.fmt(model.get('guid')))\n        .then(function(){\n          equal(find('#inputTitle').val(), 'Work in progress');\n        })\n        .then(function(){\n          return fillIn(\"#inputTitle\", \"Updated with non-sense\");\n        })\n        .then(function(){\n          return click(\"button:contains('Cancel')\");\n        })\n        .then(function(){\n          var stored = storage.find( Photo, guid );\n          equal(Em.typeOf(stored), 'instance');\n          equal(stored.get('title'), \"Work in progress\");\n        }); \n    });\n\n  });",
    "define(\"ember-crud-example/tests/acceptance/photos_new_test\",\n  [\"ember-crud-example/app\"],\n  function(App) {\n    \"use strict\";\n    /* global deletePhotos: false */\n\n\n    module(\"Acceptances - Photos New\", {\n      setup: function(){\n        App.reset();\n      },\n      teardown: function() {\n        deletePhotos();\n      }\n    });\n\n    test(\"renders\", function(){\n      visit('/photos/new').then(function(){\n        ok(exists(\"legend:contains('New photo')\"));\n        ok(exists(\"button:contains('Create')\"));\n      });\n    });\n\n    test(\"creates\", function(){\n\n      var itemCount;\n\n      visit('/')\n        .then(function(){\n          itemCount = find(\"tr\").length;\n        })\n        .then(function(){\n          return click(\"button:contains('New photo')\");\n        })\n        .then(function(){\n          return fillIn(\"#inputTitle\", \"Photo 1 Title\");\n        })\n        .then(function(){\n          return fillIn(\"#textareaDescription\", \"Photo 1 Description\");\n        })\n        .then(function(){\n          return click( \"button:contains('Create')\");\n        })\n        .then(function(){\n          ok(exists(\"button:contains('New photo')\"));\n          equal( find('tr').length, itemCount + 1 );\n        });\n\n    });\n  });",
    "define(\"ember-crud-example/tests/acceptance/photos_test\",\n  [\"ember-crud-example/app\"],\n  function(App) {\n    \"use strict\";\n\n    module(\"Acceptances - Photos\", {\n      setup: function(){\n        App.reset();\n      }\n    });\n\n    test(\"index renders\", function(){\n      visit('/photos').then(function(){\n        ok(exists(\".btn.new:contains('New photo')\"));\n      });\n    });\n\n  });",
    "define(\"ember-crud-example/tests/unit/routes/index_test\",\n  [\"ember-crud-example/routes/index\",\"ember-crud-example/app\"],\n  function(Index, App) {\n    \"use strict\";\n\n    var route;\n\n    module(\"Unit - IndexRoute\", {\n      setup: function(){\n        route = App.__container__.lookup('route:index');\n      }\n    });\n\n    test(\"it exists\", function(){\n      ok(route);\n      ok(route instanceof Ember.Route);\n    });\n  });",
    "define(\"ember-crud-example/tests/unit/routes/photos/new_test\",\n  [\"ember-crud-example/routes/photos/new\",\"ember-crud-example/app\",\"ember-crud-example/utils/local-storage\"],\n  function(New, App, LocalStorage) {\n    \"use strict\";\n\n    var route;\n\n    module(\"Unit - PhotosNewRoute\", {\n      setup: function(){\n        route = App.__container__.lookup('route:photos.new');\n      }\n    });\n\n    test(\"it exists\", function(){\n      ok(route);\n      ok(route instanceof Ember.Route);\n    });\n\n    test(\"has storage\", function() {\n    \tok(route.storage);\n    \tok(route.storage instanceof LocalStorage);\n    });\n  });",
    "define(\"ember-crud-example/tests/unit/utils/local_storage_test\",\n  [\"ember-crud-example/app\",\"ember-crud-example/models/photo\",\"ember-crud-example/utils/local-storage\"],\n  function(App, Photo, LocalStorage) {\n    \"use strict\";\n    /* global deletePhotos: false */\n\n\n    var storage;\n\n    module(\"Unit - LocalStorage\", {\n      setup: function(){\n        storage = App.__container__.lookup('storage:main');\n      },\n      teardown: function() {\n        deletePhotos();\n      }\n    });\n\n    test(\"it exists\", function(){\n      ok(storage instanceof LocalStorage);\n    });\n\n    test(\"create photo\", function() {\n      var model, guid, found;\n\n      model = Em.run(Photo, 'create', {\n        title: \"this is a test\",\n        description: \"nice\"\n      });\n\n      Em.run(storage, 'create', model);\n      ok(!Em.isEmpty(model.get('guid')), \"guid was created\");\n      guid = model.get('guid');\n      found = storage.read( Photo, guid );\n\n      ok( !Em.isEmpty(found) );\n      equal( model.get('guid'), found.get('guid') );\n\n    });\n\n    test(\"update photo\", function() {\n\n      var model, updated, guid;\n\n      model = Em.run(Photo, 'create', {\n        'title': \"To be updated\"\n      });\n      guid = model.get('guid');\n      storage.create(model);\n      Em.run(model, 'set', 'title', \"Updated\");\n      storage.update(model);\n      updated = storage.find(Photo, guid);\n\n      ok(updated);\n      equal(updated.get('title'), 'Updated');\n\n    });\n\n    /**\n     * I have not idea why this test is failing.\n     */\n    test(\"delete photo\", function() {\n      var m1, m2, all;\n\n      m1 = Em.run(Photo, 'create', {\n        title: \"title 1\",\n        description: \"description 1\"\n      });\n\n      m2 = Em.run(Photo, 'create', {\n        title: \"title 2\",\n        description: \"description 2\"\n      });\n\n      Em.run(storage, 'create', m1);\n      Em.run(storage, 'create', m2);\n      Em.run(storage, 'remove', m2);\n\n      all = storage.findAll( Photo );\n      equal( all.length, 1 );\n\n    });\n\n\n  });"
  ]
}