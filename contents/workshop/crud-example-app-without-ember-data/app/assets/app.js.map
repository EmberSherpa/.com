{
  "version": 3,
  "file": "app.js",
  "sources": [
    "tmp/transpiled/app/app.js",
    "tmp/transpiled/app/components/canvas-file.js",
    "tmp/transpiled/app/controllers/photo/edit.js",
    "tmp/transpiled/app/controllers/photos.js",
    "tmp/transpiled/app/initializers/storage.js",
    "tmp/transpiled/app/models/index.js",
    "tmp/transpiled/app/models/photo.js",
    "tmp/transpiled/app/routes.js",
    "tmp/transpiled/app/routes/application.js",
    "tmp/transpiled/app/routes/index.js",
    "tmp/transpiled/app/routes/photo.js",
    "tmp/transpiled/app/routes/photo/new.js",
    "tmp/transpiled/app/routes/photos.js",
    "tmp/transpiled/app/utils/guid.js",
    "tmp/transpiled/app/utils/local-storage.js"
  ],
  "names": [],
  "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACltBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACr
  "sourcesContent": [
    "define(\"ember-crud-example/app\",\n  [\"resolver\",\"ember-crud-example/routes\",\"ember-crud-example/initializers/storage\"],\n  function(Resolver, routes, storage) {\n    \"use strict\";\n\n    var App = Ember.Application.create({\n      LOG_ACTIVE_GENERATION: true,\n      LOG_VIEW_LOOKUPS: true,\n      rootElement: \"#ember-crud-example\",\n      modulePrefix: 'ember-crud-example', \n      Resolver: Resolver\n    });\n\n    App.Router.map(routes);\n\n    Ember.Application.initializer(storage);\n\n    return App;\n  });",
    "define(\"ember-crud-example/components/canvas-file\",\n  [],\n  function() {\n    \"use strict\";\n    /* global FileReader: false */\n\n    var CanvasFileComponent = Ember.Component.extend({\n      actions: {\n        start: function() {\n          var that = this;\n          var input = this.get('input');\n          input.click();\n          input.change( function( event ) {\n            Ember.run( that, 'readFileData', this.files );\n          });\n        }\n      },\n      classNames: [ 'canvas-file'],\n      didInsertElement: function() {\n        this.resetFile();\n\n        var canvas = this.$().find( 'canvas' );\n        canvas.attr( 'width', this.get( 'width' ) );\n        canvas.attr( 'height', this.get( 'height' ) );\n\n        this.set( 'canvas', canvas );\n        this.set( 'canvasContext', canvas[0].getContext( '2d' ) );\n        this.set( 'img', this.$('img.preview') );\n        this.set( 'shadow', this.$('img.shadow') );\n        this.set( 'input', this.$().find( 'input' ) );\n      },\n      src: function() {\n        if ( Em.isNone( this.get('value' ) ) ) {\n          return \"http://placehold.it/%@x%@\".fmt( this.get('width'), this.get('height') );\n        } else {\n          return this.get('value');\n        }\n      }.property( 'value', 'width', 'height' ),\n      readFileData: function( files ) {\n        // TODO: handle scenario when multiple files are selected\n        // TODO: test for file types\n        if ( files.length ) {\n          var file = this.get( 'file' );\n          file.readAsDataURL( files[0] );\n        }\n      },\n      resetFile: function() {\n        var that = this;\n        var file = new FileReader();\n        file.onload = function( event ) {\n          that.resetFile();\n          that.resetCanvas();\n          that.get('shadow').attr( 'src', event.target.result );\n          Ember.run( that, 'drawImage', that.get('shadow')[0] );\n          that.set( 'value', that.get('canvas')[0].toDataURL(\"image/jpeg\") );\n        };\n        this.set( 'file', file );\n      },\n      resetCanvas: function() {\n        var context = this.get( 'canvasContext' );\n        context.beginPath();\n        context.rect( 0, 0, this.get('width'), this.get('height') );\n        context.fillStyle = 'white';\n        context.fill();\n      },\n      getNewDimensions: function( img ) {\n        var\n          width = img.width,\n          height = img.height,\n          maxWidth = this.get( 'width' ),\n          maxHeight = this.get( 'height' );\n\n        if (width > height) {\n          if (width > maxWidth) {\n            height *= maxWidth / width;\n            width = maxWidth;\n          }\n        } else {\n          if (height > maxHeight) {\n            width *= maxHeight / height;\n            height = maxHeight;\n          }\n        }\n        return { width: width, height: height };\n      },\n      drawImage: function( img ) {\n        var\n          width = this.get( 'width' ),\n          height = this.get( 'height' ),\n          resized = this.getNewDimensions( img );\n        this.get('canvasContext').drawImage( img, ( width - resized.width ) / 2 , ( height - resized.height ) / 2, resized.width, resized.height );\n      }\n    });\n\n    return CanvasFileComponent;\n  });",
    "define(\"ember-crud-example/controllers/photo/edit\",\n  [],\n  function() {\n    \"use strict\";\n    var PhotoEditController = Ember.ObjectController.extend({\n      needs: [ 'photo' ]\n    });\n\n    return PhotoEditController;\n  });",
    "define(\"ember-crud-example/controllers/photos\",\n  [],\n  function() {\n    \"use strict\";\n    var PhotosController = Ember.ArrayController.extend({\n      contentBinding: 'storage.cache.photo'\n    });\n\n    return PhotosController;\n  });",
    "define(\"ember-crud-example/initializers/storage\",\n  [\"ember-crud-example/utils/local-storage\"],\n  function(LocalStorage) {\n    \"use strict\";\n\n    var initializer = {\n      name: \"storageInjections\",\n      initialize: function( container, application ) {\n        // register singleton instance of LocalStorage to be used whenever performing CRUD operations\n        application.register( 'storage:main', LocalStorage );\n        // register singleton instance cache object used for binding\n        application.register( 'cache:main', Ember.Object );\n        // inject storage into every route\n        application.inject( 'route', 'storage', 'storage:main' );\n        // inject cache into storage\n        application.inject( 'storage:main', 'cache', 'cache:main' );\n        // inject storage into all controllers\n        application.inject( 'controller', 'storage', 'storage:main' );\n      }\n    };\n\n    return initializer;\n  });",
    "define(\"ember-crud-example/models/index\",\n  [\"ember-crud-example/app\",\"ember-crud-example/utils/guid\"],\n  function(App, guid) {\n    \"use strict\";\n\n    /**\n     * Ember.js models are just objects. \n     * I find it confusing that Ember.js refers to\n     * models as models even though they're just objects. \n     * I'm defining the Model class to use as base for other models.\n     */\n    var Model = Ember.Object.extend( Ember.Copyable, {\n      init: function() {\n        if (Em.isNone(this.constructor.storageKey)) {\n          throw new Error(Ember.String.fmt(\"%@ has to implement storageKey property or method\", [this]));\n        }\n        if (Em.isNone(this.get('guid'))) {\n          // guid is null when item is being created\n          this.set( 'guid', guid() );\n        }    \n        this._super();\n      },\n      // default guid\n      guid: null,\n      copy: function() {\n        return Em.run( this.constructor, 'create', this.serialize() );\n      },\n      serialize: function() {\n        throw new Error(Ember.String.fmt(\"%@ has to implement serialize() method which is required to convert it to JSON.\", [this]));\n      }\n    });\n\n    // add a class property ( aka static property )\n    Model.reopenClass({\n      /**\n       * String name of the storage key for this model.\n       * This is only necessary because Ember has a bug that prevents proper class inspection when using modules\n       * TODO: convert Model to a class and remove storageKey after Ember class inspection is fixed.\n       */\n      storageKey: null\n    });\n\n    return Model;\n  });",
    "define(\"ember-crud-example/models/photo\",\n  [\"ember-crud-example/models/index\"],\n  function(Model) {\n    \"use strict\";\n\n    var Photo = Model.extend({\n      image: null,\n      title: '',\n      description: '',\n      // thumbnail is taken from placeholder.it or the image if \n      thumbnail: function() {\n        if (Em.isNone(this.get('image'))) {\n          return \"http://placehold.it/75x75\";\n        } else {\n          return this.get('image');\n        }\n      }.property( 'image' ),\n      // Tells the resistance layer what properties to save to localStorage\n      // Ember Data does this for you.\n      serialize: function() {\n        return this.getProperties([ \"guid\", \"image\", \"title\", \"description\" ]);\n      }\n    });\n\n    // set storage key for this class of models\n    Photo.reopenClass({\n      storageKey: 'photo'\n    });\n\n    return Photo;\n  });",
    "define(\"ember-crud-example/routes\",\n  [],\n  function() {\n    \"use strict\";\n    function Routes() {\n      this.resource('photos',     {path:'/photos' });\n      this.resource('photo.new',  {path:'/photo/new'});  \n      this.resource('photo',      {path:'/photo/:guid'}, function(){\n        this.route('edit');\n      });\n    }\n\n\n    return Routes;\n  });",
    "define(\"ember-crud-example/routes/application\",\n  [\"ember-crud-example/models/photo\"],\n  function(Photo) {\n    \"use strict\";\n\n    var ApplicationRoute = Ember.Route.extend({\n      actions: {\n        goToNewPhoto: function () {\n          this.transitionTo( 'photo.new' );\n        },\n        goToPhoto: function( model ) {\n          this.transitionTo( 'photo', model );\n        },\n        edit: function( model ) {\n          this.transitionTo( 'photo.edit', model.copy() );\n        },\n        create: function( model ) {\n          this.storage.create( model );\n          this.transitionTo( 'photos' );      \n        },\n        update: function( model ) {\n          this.storage.update( model );\n          this.transitionTo( 'photos' );\n        },\n        remove: function( model ) {\n          this.storage.remove( model );\n        },\n        cancel: function( model ) {\n          Ember.run( model, \"destroy\" );\n          this.storage.refresh(Photo);\n          this.transitionTo( 'photos' );      \n        }\n      }\n    });\n\n    return ApplicationRoute;\n  });",
    "define(\"ember-crud-example/routes/index\",\n  [],\n  function() {\n    \"use strict\";\n    var IndexRoute = Ember.Route.extend({\n      beforeModel: function( transition ) {\n        // redirect root to photos\n        this.transitionTo( 'photos' );\n      }\n    });\n\n    return IndexRoute;\n  });",
    "define(\"ember-crud-example/routes/photo\",\n  [\"ember-crud-example/models/photo\"],\n  function(Photo) {\n    \"use strict\";\n\n    var PhotoRoute = Ember.Route.extend({\n      model: function( params ) {\n        return this.storage.find(Photo, params.guid);\n      },\n      serialize: function( params ) {\n        return { guid: params.guid };\n      }\n    });\n\n    return PhotoRoute;\n  });",
    "define(\"ember-crud-example/routes/photo/new\",\n  [\"ember-crud-example/models/photo\"],\n  function(Photo) {\n    \"use strict\";\n\n    var PhotoNewRoute = Ember.Route.extend({\n      model: function() {\n        // provide a new photo to the template\n        return Photo.create({});\n      },\n      setupController: function( controller, model ) {\n        controller.set( 'content', model );\n      }\n    });\n\n    return PhotoNewRoute;\n  });",
    "define(\"ember-crud-example/routes/photos\",\n  [\"ember-crud-example/models/photo\"],\n  function(Photo) {\n    \"use strict\";\n\n    var PhotosRoute = Ember.Route.extend({\n      model: function() {\n        return this.storage.findAll(Photo);\n      }\n    });\n\n    return PhotosRoute;\n  });",
    "define(\"ember-crud-example/utils/guid\",\n  [],\n  function() {\n    \"use strict\";\n    /**\n     * Generates a GUID string, according to RFC4122 standards.\n     * @returns {String} The generated GUID.\n     * @example af8a8416-6e18-a307-bd9c-f2c947bbb3aa\n     * @author Slavik Meltser (slavik@meltser.info).\n     * @link http://slavik.meltser.info/?p=142\n     * @link http://stackoverflow.com/a/16693578/172894\n     */\n    var guid = function() {\n      function _p8(s) {\n        var p = (Math.random().toString(16)+\"000000000\").substr(2,8);\n        return s ? \"-\" + p.substr(0,4) + \"-\" + p.substr(4,4) : p ;\n      }\n      return _p8() + _p8(true) + _p8(true) + _p8();\n    };\n\n    return guid;\n  });",
    "define(\"ember-crud-example/utils/local-storage\",\n  [\"ember-crud-example/app\",\"ember-crud-example/utils/guid\"],\n  function(App, guid) {\n    \"use strict\";\n    /* global localStorage: false */\n\n\n    var LocalStorage = Ember.Object.extend({\n      getKey: function( type ) {\n        return type.storageKey;\n      },\n      create: function( model ) {\n        var type, existing;\n\n        type = model.constructor;\n        existing = this.findAll( type );\n        existing.push( model );\n        this.put( type, existing );\n        return model;\n      },\n      read: function( type, guid ) {\n        var all = this.findAll(type);\n        return all.find(function(item) {\n          return item.get( 'guid' ) === guid;\n        });\n      },\n      update: function( model ) {\n        var type, models, updated = false, updatedModels;\n\n        type = model.constructor;\n        models = this.findAll( type );\n        updatedModels = models.map( function( item ) {\n          if ( item.get('guid') === model.get('guid') ) {\n            updated = true;\n            return model;\n          } else {\n            return item;\n          }\n        });\n        this.put( type, updatedModels );\n        return updated;\n      },\n      remove: function( model ) {\n        // TODO: this needs to be looked over\n        var type, filtered = [], all = [], guid;\n        type = model.constructor;\n        if ( model ) {\n          guid = model.get('guid');\n          if ( guid ) {\n            all = this.findAll( type );\n            filtered = all.filter( function( item ) {\n              return item.get('guid') !== guid;\n            });\n          }\n          this.put( type, filtered );\n        }\n        return filtered.length !== all.length;\n      },\n      find: function( type, id ) {\n        return Em.run( this, 'read', type, id );\n      },\n      findAll: function( type ) {\n        return this.refresh( type );\n      },\n      put: function( type, models ) {\n        var key, objects;\n\n        key = this.getKey( type );\n        Em.run(this.cache, 'set', key, models);\n        objects = models.map(function(item){\n          return item.serialize();\n        });\n        localStorage.setItem( key, JSON.stringify( objects ) );\n      },\n      refresh: function( type ) { \n        var  key, all, cacheObj;\n\n        key = this.getKey(type);\n        // cache property doesn't exist, let's create it\n        if (Em.isNone(this.cache.get(key))) {\n          // check if localStorage has an entry for this type\n          cacheObj = Em.run(Em.Object, 'create', {});\n          Em.run( this.cache, 'set', key, cacheObj );\n        }\n        if (localStorage.hasOwnProperty(key)) {\n          // get all of the items for this type and convert JSON objects\n          all = JSON.parse( localStorage.getItem( key ) );\n          all = Em.A(all).map(function(item){\n            return Em.run( type, 'create', item );\n          });\n        }\n        Em.run(this.cache, 'set', key, all);\n        all = this.cache.get(key);\n        if ( typeof all === 'undefined' ) {\n          all = [];\n        }\n        return all;\n      }\n    });\n\n    return LocalStorage;\n  });"
  ]
}